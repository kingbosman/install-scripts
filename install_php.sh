#!/bin/bash

# script generated by Gemini

# A script to install a specified or the latest stable PHP version on Ubuntu.
# It uses the Ondřej Surý PPA for up-to-date packages.

# --- Configuration ---
# Set the latest stable version. This should be updated periodically.
# As of late 2024, PHP 8.4 is often the latest stable version provided by the PPA.
LATEST_PHP_VERSION="8.4"
DEFAULT_PHP_EXTENSIONS="cli common mysql curl gd mbstring xml zip"
# ---------------------

# Function to display usage information
usage() {
    echo "Usage: $0 [version]"
    echo "Install a specific PHP version (e.g., 8.3) or the latest ($LATEST_PHP_VERSION) if no version is provided."
    echo ""
    echo "Example (Latest): $0"
    echo "Example (Specific): $0 8.3"
    exit 1
}

# Check if a version argument was provided
if [ -n "$1" ]; then
    # Validate the argument format (e.g., 8.2, 7.4)
    if [[ ! "$1" =~ ^[0-9]+\.[0-9]+$ ]]; then
        echo "Error: Invalid PHP version format. Please use X.Y (e.g., 8.3)."
        usage
    fi
    PHP_VERSION="$1"
    echo "Installing specified PHP version: PHP $PHP_VERSION..."
else
    # Install the defined latest version
    PHP_VERSION="$LATEST_PHP_VERSION"
    echo "No version provided. Installing latest stable PHP version: PHP $PHP_VERSION..."
fi

# Package names
PHP_PACKAGE="php${PHP_VERSION/./}"
EXTENSION_PACKAGES=$(echo $DEFAULT_PHP_EXTENSIONS | sed "s/\([^ ]*\)/${PHP_PACKAGE}-\1/g")

# --- Step 1: Update and Install PPA Dependencies ---
echo "--- 1/4: Updating system and adding Ondřej Surý PPA ---"
sudo apt update
if ! sudo apt install -y software-properties-common ca-certificates lsb-release apt-transport-https; then
    echo "Error: Failed to install prerequisite packages."
    exit 1
fi

if ! sudo add-apt-repository ppa:ondrej/php -y; then
    echo "Error: Failed to add the Ondřej Surý PPA."
    exit 1
fi

sudo apt update
echo "PPA added and package list updated."

# --- Step 2: Install PHP Core and Extensions ---
echo "--- 2/4: Installing PHP $PHP_VERSION and common extensions ---"
INSTALL_COMMAND="sudo apt install -y ${PHP_PACKAGE} ${EXTENSION_PACKAGES}"
echo "Running command: $INSTALL_COMMAND"

if ! $INSTALL_COMMAND; then
    echo "Error: Failed to install PHP $PHP_VERSION or its extensions."
    echo "Please check if PHP $PHP_VERSION is available in the PPA."
    exit 1
fi
echo "PHP $PHP_VERSION and extensions successfully installed."

# --- Step 3: Set as Default PHP CLI Version ---
echo "--- 3/4: Setting PHP $PHP_VERSION as the default CLI version ---"
# update-alternatives uses package name for its path, which is consistent.
ALTERNATIVES_PATH="/usr/bin/php${PHP_VERSION}"

if [ -f "$ALTERNATIVES_PATH" ]; then
    # Force the desired version to be the default for the 'php' command
    sudo update-alternatives --set php "$ALTERNATIVES_PATH"
    echo "PHP $PHP_VERSION set as the default CLI version."
else
    # Fallback to interactive mode if --set fails (which it shouldn't if installed)
    echo "Could not set default using --set. Running interactive configuration..."
    sudo update-alternatives --config php
fi

# --- Step 4: Verification ---
echo "--- 4/4: Verifying installation ---"
INSTALLED_VERSION=$(php -v | head -n 1 | cut -d " " -f 2 | cut -d "-" -f 1)

if [[ "$INSTALLED_VERSION" == "$PHP_VERSION"* ]]; then
    echo "✅ Success! PHP $INSTALLED_VERSION is installed and set as default."
    php -v
else
    echo "❌ Warning: Verification failed. Expected version $PHP_VERSION, but 'php -v' shows $INSTALLED_VERSION."
fi

echo "Installation script finished."
